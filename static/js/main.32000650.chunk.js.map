{"version":3,"sources":["App.tsx","index.tsx"],"names":["globalStyles","css","WrapperStyled","styled","div","CameraAreaStyled","ResultAreaStyled","App","React","memo","useState","deviceId","setDeviceId","option","none","result","setResult","isCameraActive","setIsCameraActive","videoRef","useRef","codeReader","useMemo","BrowserMultiFormatReader","useEffect","navigator","mediaDevices","enumerateDevices","then","data","map","item","kind","catch","err","console","log","start","useCallback","decodeFromVideoDevice","current","error","some","NotFoundException","reset","getResult","pipe","res","getText","fold","flow","fromNullable","getOrElse","Fragment","styles","onClick","ref","autoPlay","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qzBAUA,IAAMA,EAAeC,YAAH,KAQZC,EAAgBC,IAAOC,IAAV,KAKbC,EAAmBF,IAAOC,IAAV,KAQhBE,EAAmBH,IAAOC,IAAV,KAKTG,EAAMC,IAAMC,MAAK,WAAO,IAAD,EACHD,IAAME,SAAiB,IADpB,mBAC5BC,EAD4B,KAClBC,EADkB,OAEPJ,IAAME,SAAyBG,IAAOC,MAF/B,mBAE5BC,EAF4B,KAEpBC,EAFoB,OAGSR,IAAME,UAAkB,GAHjC,mBAG5BO,EAH4B,KAGZC,EAHY,KAI7BC,EAAWX,IAAMY,OAAyB,MAC1CC,EAAab,IAAMc,SAAQ,kBAAM,IAAIC,6BAA4B,IAEvEf,IAAMgB,WAAU,WACfC,UAAUC,aACRC,mBACAC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,KAAI,SAAAC,GAAI,MAAmB,eAAdA,EAAKC,KAAwBpB,EAAYmB,EAAKpB,UAAYC,EAAY,UACrGqB,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QACzB,IAEH,IAAMG,EAAQ7B,IAAM8B,aAAY,WAE/BH,QAAQC,IAAI,mBACZD,QAAQC,IAAI,WAAYzB,GACxBU,EACEkB,sBAAsB5B,EAAUQ,EAASqB,SAAS,SAACzB,EAAQ0B,GAC3DvB,GAAkB,GACdH,IACHoB,QAAQC,IAAI,SAAUrB,GACtBC,EAAUH,IAAO6B,KAAK3B,MAEnB0B,GAAWA,aAAiBE,qBAC/BR,QAAQM,MAAM,UAAWA,MAG1BR,OAAM,SAAAQ,GACNN,QAAQC,IAAI,UAAWK,QAEvB,CAACpB,EAAYV,IAEViC,EAAQpC,IAAM8B,aAAY,WAC/BjB,EAAWuB,QACX1B,GAAkB,KAChB,CAACG,IAEEwB,EAAYrC,IAAMc,SACvB,kBACCwB,YACC/B,EACAF,IAAOiB,KAAI,SAAAiB,GAAG,OAAIA,EAAIC,aACtBnC,IAAOoC,MACN,kBAAM,0CACNC,YACCrC,IAAOsC,aACPtC,IAAOuC,WAA2B,kBAAM,4CACxC,SAAArC,GAAM,OAAI,sCAAYA,UAI1B,CAACA,IAGF,OACC,kBAAC,IAAMsC,SAAP,KACC,kBAAC,IAAD,CAAQC,OAAQtD,IAEhB,kBAACE,EAAD,KACGe,EAKD,GAJA,kBAACZ,EAAD,KACC,4BAAQkD,QAASlB,GAAjB,oBAKF,2BAAOmB,IAAKrC,EAAUsC,UAAQ,EAACC,MAAO,OAAQC,OAAQ,SAEvD,kBAACrD,EAAD,KACEuC,EACD,4BAAQU,QAASX,GAAjB,wBCxGJgB,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAACvD,EAAD,OAEDwD,SAASC,eAAe,W","file":"static/js/main.32000650.chunk.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\nimport {css, Global} from '@emotion/core';\nimport {BrowserMultiFormatReader, NotFoundException, Result} from '@zxing/library';\nimport {Option} from 'fp-ts/Option';\nimport {option} from 'fp-ts';\nimport {pipe} from 'fp-ts/pipeable';\nimport {flow} from 'fp-ts/function';\n\n//#region styled\nconst globalStyles = css`\n\thtml,\n\tbody,\n\t#root {\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t}\n`;\nconst WrapperStyled = styled.div`\n\tmax-width: 400px;\n\theight: 200px;\n\tpadding: 5px;\n`;\nconst CameraAreaStyled = styled.div`\n\twidth: inherit;\n\theight: inherit;\n\tbackground-color: #f2f2f2;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n`;\nconst ResultAreaStyled = styled.div`\n\tpadding: 5px;\n`;\n//#endregion\n\nexport const App = React.memo(() => {\n\tconst [deviceId, setDeviceId] = React.useState<string>('');\n\tconst [result, setResult] = React.useState<Option<Result>>(option.none);\n\tconst [isCameraActive, setIsCameraActive] = React.useState<boolean>(false);\n\tconst videoRef = React.useRef<HTMLVideoElement>(null);\n\tconst codeReader = React.useMemo(() => new BrowserMultiFormatReader(), []);\n\n\tReact.useEffect(() => {\n\t\tnavigator.mediaDevices\n\t\t\t.enumerateDevices()\n\t\t\t.then(data => data.map(item => (item.kind === 'videoinput' ? setDeviceId(item.deviceId) : setDeviceId(''))))\n\t\t\t.catch(err => console.log(err));\n\t}, []);\n\n\tconst start = React.useCallback(() => {\n\t\t//decoding starts\n\t\tconsole.log('decoding starts');\n\t\tconsole.log('deviceId', deviceId);\n\t\tcodeReader\n\t\t\t.decodeFromVideoDevice(deviceId, videoRef.current, (result, error) => {\n\t\t\t\tsetIsCameraActive(true);\n\t\t\t\tif (result) {\n\t\t\t\t\tconsole.log('result', result);\n\t\t\t\t\tsetResult(option.some(result));\n\t\t\t\t}\n\t\t\t\tif (error && !(error instanceof NotFoundException)) {\n\t\t\t\t\tconsole.error('error 1', error);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.log('error 2', error);\n\t\t\t});\n\t}, [codeReader, deviceId]);\n\n\tconst reset = React.useCallback(() => {\n\t\tcodeReader.reset();\n\t\tsetIsCameraActive(false);\n\t}, [codeReader]);\n\n\tconst getResult = React.useMemo(\n\t\t() =>\n\t\t\tpipe(\n\t\t\t\tresult,\n\t\t\t\toption.map(res => res.getText()),\n\t\t\t\toption.fold(\n\t\t\t\t\t() => <p>No result</p>,\n\t\t\t\t\tflow(\n\t\t\t\t\t\toption.fromNullable,\n\t\t\t\t\t\toption.getOrElse<React.ReactNode>(() => <p>No result</p>),\n\t\t\t\t\t\tresult => <p>Result: {result}</p>,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t[result],\n\t);\n\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Global styles={globalStyles} />\n\n\t\t\t<WrapperStyled>\n\t\t\t\t{!isCameraActive ? (\n\t\t\t\t\t<CameraAreaStyled>\n\t\t\t\t\t\t<button onClick={start}>Activate Camera</button>\n\t\t\t\t\t</CameraAreaStyled>\n\t\t\t\t) : (\n\t\t\t\t\t''\n\t\t\t\t)}\n\t\t\t\t<video ref={videoRef} autoPlay width={'100%'} height={'200'} />\n\t\t\t</WrapperStyled>\n\t\t\t<ResultAreaStyled>\n\t\t\t\t{getResult}\n\t\t\t\t<button onClick={reset}>Turn off Camera</button>\n\t\t\t</ResultAreaStyled>\n\t\t</React.Fragment>\n\t);\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n);\n"],"sourceRoot":""}