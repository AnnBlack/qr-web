{"version":3,"sources":["App.tsx","index.tsx"],"names":["globalStyles","css","WrapperStyled","styled","div","CameraAreaStyled","ResultAreaStyled","SelectStyled","select","TextStyled","App","React","memo","useState","deviceId","setDeviceId","option","none","result","setResult","isCameraActive","setIsCameraActive","deviceInfo","setDeviceInfo","videoRef","useRef","codeReader","useMemo","BrowserMultiFormatReader","useEffect","navigator","mediaDevices","enumerateDevices","then","data","map","item","kind","prev","catch","err","console","log","start","useCallback","decodeFromVideoDevice","current","error","some","NotFoundException","reset","getResult","pipe","res","getText","fold","flow","fromNullable","getOrElse","handleChange","event","target","value","getDeviceInfo","device","groupId","label","Fragment","styles","onClick","ref","autoPlay","width","height","onChange","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mkCAUA,IAAMA,EAAeC,YAAH,KAQZC,EAAgBC,IAAOC,IAAV,KAKbC,EAAmBF,IAAOC,IAAV,KAQhBE,EAAmBH,IAAOC,IAAV,KAGhBG,EAAeJ,IAAOK,OAAV,KAOZC,EAAaN,IAAOC,IAAV,KAMHM,EAAMC,IAAMC,MAAK,WAAO,IAAD,EACHD,IAAME,SAAiB,IADpB,mBAC5BC,EAD4B,KAClBC,EADkB,OAEPJ,IAAME,SAAyBG,IAAOC,MAF/B,mBAE5BC,EAF4B,KAEpBC,EAFoB,OAGSR,IAAME,UAAkB,GAHjC,mBAG5BO,EAH4B,KAGZC,EAHY,OAICV,IAAME,SAAiC,IAJxC,mBAI5BS,EAJ4B,KAIhBC,EAJgB,KAM7BC,EAAWb,IAAMc,OAAyB,MAC1CC,EAAaf,IAAMgB,SAAQ,kBAAM,IAAIC,6BAA4B,IAEvEjB,IAAMkB,WAAU,WACfC,UAAUC,aACRC,mBACAC,MAAK,SAAAC,GAAI,OACTA,EAAKC,KAAI,SAAAC,GAAI,MAAmB,eAAdA,EAAKC,KAAwBd,GAAc,SAAAe,GAAI,4BAAQA,GAAR,CAAcF,OAASb,GAAc,SAAAe,GAAI,mBAAQA,YAElHC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QACzB,IAEHC,QAAQC,IAAI,WAAY5B,GAcxB,IAAM6B,EAAQhC,IAAMiC,aAAY,WAE/BlB,EACEmB,sBAAsB/B,EAAUU,EAASsB,SAAS,SAAC5B,EAAQ6B,GAC3D1B,GAAkB,GACdH,IACHuB,QAAQC,IAAI,SAAUxB,GACtBC,EAAUH,IAAOgC,KAAK9B,MAEnB6B,GAAWA,aAAiBE,qBAC/BR,QAAQM,MAAM,UAAWA,MAI1BR,OAAM,SAAAQ,GACNN,QAAQC,IAAI,UAAWK,QAEvB,CAACrB,EAAYZ,IAEVoC,EAAQvC,IAAMiC,aAAY,WAC/BlB,EAAWwB,QACX7B,GAAkB,KAChB,CAACK,IAEEyB,EAAYxC,IAAMgB,SACvB,kBACCyB,YACClC,EACAF,IAAOmB,KAAI,SAAAkB,GAAG,OAAIA,EAAIC,aACtBtC,IAAOuC,MACN,kBAAM,0CACNC,YACCxC,IAAOyC,aACPzC,IAAO0C,WAA2B,kBAAM,4CACxC,SAAAxC,GAAM,OAAI,sCAAYA,UAI1B,CAACA,IAGFP,IAAMkB,WAAU,WACfY,QAAQC,IAAI,aAAcpB,KACxB,CAACA,IAEJ,IAAMqC,EAAehD,IAAMiC,aAAY,SAAAgB,GACtC7C,EAAY6C,EAAMC,OAAOC,SACvB,IAEGC,EAAgBpD,IAAMgB,SAC3B,kBAAML,EAAWa,KAAI,SAAA6B,GAAM,gBAAOA,EAAO3B,KAAd,YAAsB2B,EAAOlD,SAA7B,YAAyCkD,EAAOC,QAAhD,YAA2DD,EAAOE,YAE7F,CAAC5C,IAEF,OACC,kBAAC,IAAM6C,SAAP,KACC,kBAAC,IAAD,CAAQC,OAAQpE,IAEhB,kBAACE,EAAD,KACGkB,EAKD,GAJA,kBAACf,EAAD,KACC,4BAAQgE,QAAS1B,GAAjB,oBAKF,2BAAO2B,IAAK9C,EAAU+C,UAAQ,EAACC,MAAO,OAAQC,OAAQ,SAEvD,kBAACnE,EAAD,KACE6C,EACD,kBAAC5C,EAAD,CAAcmE,SAAUf,GACtBrC,EAAWa,KAAI,SAAA6B,GAAM,OACrB,4BAAQW,IAAKX,EAAOlD,SAAUgD,MAAOE,EAAOlD,UAC1CkD,EAAOE,WAIX,4BAAQG,QAASnB,GAAjB,mBACA,kBAACzC,EAAD,KAAasD,QCzJjBa,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAACpE,EAAD,OAEDqE,SAASC,eAAe,W","file":"static/js/main.719368aa.chunk.js","sourcesContent":["import React from 'react';\nimport styled from '@emotion/styled';\nimport {css, Global} from '@emotion/core';\nimport {BrowserMultiFormatReader, NotFoundException, Result} from '@zxing/library';\nimport {Option} from 'fp-ts/Option';\nimport {option} from 'fp-ts';\nimport {pipe} from 'fp-ts/pipeable';\nimport {flow} from 'fp-ts/function';\n\n//#region styled\nconst globalStyles = css`\n\thtml,\n\tbody,\n\t#root {\n\t\tpadding: 0;\n\t\tmargin: 0;\n\t}\n`;\nconst WrapperStyled = styled.div`\n\tmax-width: 400px;\n\theight: 200px;\n\tpadding: 5px;\n`;\nconst CameraAreaStyled = styled.div`\n\twidth: inherit;\n\theight: inherit;\n\tbackground-color: #f2f2f2;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n`;\nconst ResultAreaStyled = styled.div`\n\tpadding: 5px;\n`;\nconst SelectStyled = styled.select`\n\tdisplay: flex;\n\tmargin-bottom: 15px;\n\toption {\n\t\theight: 20px;\n\t}\n`;\nconst TextStyled = styled.div`\n\tmax-width: 400px;\n\tmargin-top: 20px;\n`;\n//#endregionÆ’\n\nexport const App = React.memo(() => {\n\tconst [deviceId, setDeviceId] = React.useState<string>('');\n\tconst [result, setResult] = React.useState<Option<Result>>(option.none);\n\tconst [isCameraActive, setIsCameraActive] = React.useState<boolean>(false);\n\tconst [deviceInfo, setDeviceInfo] = React.useState<Array<MediaDeviceInfo>>([]);\n\n\tconst videoRef = React.useRef<HTMLVideoElement>(null);\n\tconst codeReader = React.useMemo(() => new BrowserMultiFormatReader(), []);\n\n\tReact.useEffect(() => {\n\t\tnavigator.mediaDevices\n\t\t\t.enumerateDevices()\n\t\t\t.then(data =>\n\t\t\t\tdata.map(item => (item.kind === 'videoinput' ? setDeviceInfo(prev => [...prev, item]) : setDeviceInfo(prev => [...prev]))),\n\t\t\t)\n\t\t\t.catch(err => console.log(err));\n\t}, []);\n\n\tconsole.log('deviceId', deviceId);\n\n\t// React.useEffect(() => {\n\t// \tcodeReader\n\t// \t\t.listVideoInputDevices()\n\t// \t\t.then(devices => {\n\t// \t\t\tdevices.map(device => {\n\t// \t\t\t\tconsole.log('device', device);\n\t// \t\t\t\treturn setDeviceInfo(prev => [...prev, device]);\n\t// \t\t\t});\n\t// \t\t})\n\t// \t\t.catch(e => console.log(e));\n\t// }, [codeReader]);\n\n\tconst start = React.useCallback(() => {\n\t\t//decoding starts\n\t\tcodeReader\n\t\t\t.decodeFromVideoDevice(deviceId, videoRef.current, (result, error) => {\n\t\t\t\tsetIsCameraActive(true);\n\t\t\t\tif (result) {\n\t\t\t\t\tconsole.log('result', result);\n\t\t\t\t\tsetResult(option.some(result));\n\t\t\t\t}\n\t\t\t\tif (error && !(error instanceof NotFoundException)) {\n\t\t\t\t\tconsole.error('error 1', error);\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t.catch(error => {\n\t\t\t\tconsole.log('error 2', error);\n\t\t\t});\n\t}, [codeReader, deviceId]);\n\n\tconst reset = React.useCallback(() => {\n\t\tcodeReader.reset();\n\t\tsetIsCameraActive(false);\n\t}, [codeReader]);\n\n\tconst getResult = React.useMemo(\n\t\t() =>\n\t\t\tpipe(\n\t\t\t\tresult,\n\t\t\t\toption.map(res => res.getText()),\n\t\t\t\toption.fold(\n\t\t\t\t\t() => <p>No result</p>,\n\t\t\t\t\tflow(\n\t\t\t\t\t\toption.fromNullable,\n\t\t\t\t\t\toption.getOrElse<React.ReactNode>(() => <p>No result</p>),\n\t\t\t\t\t\tresult => <p>Result: {result}</p>,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t[result],\n\t);\n\n\tReact.useEffect(() => {\n\t\tconsole.log('deviceInfo', deviceInfo);\n\t}, [deviceInfo]);\n\n\tconst handleChange = React.useCallback(event => {\n\t\tsetDeviceId(event.target.value);\n\t}, []);\n\n\tconst getDeviceInfo = React.useMemo(\n\t\t() => deviceInfo.map(device => `${device.kind} ${device.deviceId} ${device.groupId} ${device.label}`),\n\n\t\t[deviceInfo],\n\t);\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Global styles={globalStyles} />\n\n\t\t\t<WrapperStyled>\n\t\t\t\t{!isCameraActive ? (\n\t\t\t\t\t<CameraAreaStyled>\n\t\t\t\t\t\t<button onClick={start}>Activate Camera</button>\n\t\t\t\t\t</CameraAreaStyled>\n\t\t\t\t) : (\n\t\t\t\t\t''\n\t\t\t\t)}\n\t\t\t\t<video ref={videoRef} autoPlay width={'100%'} height={'200'} />\n\t\t\t</WrapperStyled>\n\t\t\t<ResultAreaStyled>\n\t\t\t\t{getResult}\n\t\t\t\t<SelectStyled onChange={handleChange}>\n\t\t\t\t\t{deviceInfo.map(device => (\n\t\t\t\t\t\t<option key={device.deviceId} value={device.deviceId}>\n\t\t\t\t\t\t\t{device.label}\n\t\t\t\t\t\t</option>\n\t\t\t\t\t))}\n\t\t\t\t</SelectStyled>\n\t\t\t\t<button onClick={reset}>Turn off Camera</button>\n\t\t\t\t<TextStyled>{getDeviceInfo}</TextStyled>\n\t\t\t</ResultAreaStyled>\n\t\t</React.Fragment>\n\t);\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root'),\n);\n"],"sourceRoot":""}